name: deploy-dev

# Build container images and deploy all of the components to beta environment

on:
  pull_request:
    types: [ closed ]
    branches:
      - main

env:
  GO_VERSION: 1.17
  PROTOC_VERSION: 3.15.3

  # without the following Terraform would always report changes in the
  # notify_slack module because the deployed lambda function binary is not
  # stored anywhere. For more details see
  # https://github.com/terraform-aws-modules/terraform-aws-lambda#faq
  TF_RECREATE_MISSING_LAMBDA_PACKAGE: false

defaults:
  run:
    shell: bash

jobs:
  build-images:
    runs-on: ubuntu-20.04
    if: ${{ github.event.pull_request.merged == true }}
    strategy:
      fail-fast: false

    env:
      AWS_ACCOUNT: michael-personal

    steps:
    - uses: actions/checkout@v3

    - name: Configure Testing account AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_MIK }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_MIK }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mdesta_dev_app_ecr_repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-dev-core-infra:
    runs-on: ubuntu-20.04
    if: ${{ github.event.pull_request.merged == true }}
    needs: build-images

    env:
      AWS_ACCOUNT: inside-dev

    steps:
    - uses: actions/checkout@v3

    - name: Checkout chapter-devops
      uses: actions/checkout@v3
      with:
        repository: 'Solibri/chapter-devops'
        ref: 'ci-scripts-2021-11-16'
        path: 'chapter-devops'
        # We need to use a separate token as the default token is valid only for this repository
        token: ${{ secrets.SOLIBRI_CI_USER_GITHUB_TOKEN }}
        # After this step is done, remove the separate token
        persist-credentials: 'false'

    - name: Get terraform version
      working-directory: devops
      shell: bash
      run: |
        source scripts/version
        echo "TERRAFORM_VERSION=${TERRAFORM_VERSION}" >>${GITHUB_ENV}

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2.0.3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Setup git credentials for Terraform to access chapter-devops repo
      uses: fusion-engineering/setup-git-credentials@v2.0.7
      with:
        credentials: https://solibri-ci:${{ secrets.SOLIBRI_CI_USER_GITHUB_TOKEN }}@github.com

    - name: Wait Concurrent
      uses: softprops/turnstyle@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Terraform for core-infra
      uses: ./chapter-devops/.github/actions/run-terraform/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_INSIDE_DEV }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_INSIDE_DEV }}
      with:
        account: 'inside-dev'
        components: |
          {
            "core_infra": ["init", "plan-apply"]
          }
        basepath: devops/terraform

  deploy-dev:
    runs-on: ubuntu-20.04
    if: ${{ github.event.pull_request.merged == true }}
    needs: build-images

    env:
      AWS_ACCOUNT: michael-personal

    steps:
    - uses: actions/checkout@v3
   
    - name: Configure Testing account AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_MIK }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_MIK }}
        aws-region: eu-west-1

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2.0.3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Run Terraform for apps
      id: apply_dev
      working-directory: terraform/apps/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_INSIDE_MIK }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_INSIDE_MIK }}
        TF_VAR_image_tag: ${{ github.sha }}
      run: |
        terraform init -no-color
        terraform apply -auto-approve -no-color -input=false -lock-timeout=300s
        echo "::set-output name=db_host::$(terraform output -no-color -json | jq -r ".api_server.value.db_instance_address")"
